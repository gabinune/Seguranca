import React, { useState } from 'react';
import {
  Typography,
  Button,
  Alert,
  Card,
  CardContent,
  Box,
  Stack,
  Chip,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Switch,
  FormControlLabel
} from '@mui/material';
import { ExpandMore, Warning, Code, Visibility, Block } from '@mui/icons-material';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism';

const ClickjackingDemo: React.FC = () => {
  const [frameProtectionEnabled, setFrameProtectionEnabled] = useState(false);
  const [showClickjackingDemo, setShowClickjackingDemo] = useState(false);
  const [clickCount, setClickCount] = useState(0);
  const [maliciousClickCount, setMaliciousClickCount] = useState(0);

  const handleLegitimateClick = () => {
    setClickCount(prev => prev + 1);
    alert('A√ß√£o leg√≠tima executada! ‚úÖ');
  };

  const handleMaliciousClick = () => {
    setMaliciousClickCount(prev => prev + 1);
    alert('üíÄ A√ß√£o maliciosa executada sem o conhecimento do usu√°rio!');
  };

  const vulnerableHeadersCode = `// ‚ùå VULNER√ÅVEL - Sem prote√ß√£o contra frames
// Nenhum header de prote√ß√£o configurado
app.get('/', (req, res) => {
  res.send('<html>...</html>');
  // Qualquer site pode colocar esta p√°gina em iframe!
});

// Ou pior ainda - explicitamente permitindo frames
app.use((req, res, next) => {
  res.setHeader('X-Frame-Options', 'ALLOWALL'); // NUNCA fa√ßa isso!
  next();
});`;

  const safeHeadersCode = `// ‚úÖ SEGURO - Headers de prote√ß√£o contra clickjacking
app.use((req, res, next) => {
  // M√©todo 1: X-Frame-Options (legado, mas ainda efetivo)
  res.setHeader('X-Frame-Options', 'DENY'); // Bloqueia todos os frames
  // ou
  res.setHeader('X-Frame-Options', 'SAMEORIGIN'); // Apenas same-origin
  
  // M√©todo 2: Content Security Policy (moderno e mais flex√≠vel)
  res.setHeader('Content-Security-Policy', "frame-ancestors 'none'"); // Bloqueia todos
  // ou
  res.setHeader('Content-Security-Policy', "frame-ancestors 'self'"); // Apenas same-origin
  // ou
  res.setHeader('Content-Security-Policy', "frame-ancestors 'self' https://trusted.com");
  
  next();
});

// Para aplica√ß√µes React/SPA
app.use(helmet({
  frameguard: { action: 'deny' }, // ou 'sameorigin'
  contentSecurityPolicy: {
    directives: {
      frameAncestors: ["'none'"] // ou ["'self'"]
    }
  }
}));`;

  const attackCodeHTML = `<!-- Site malicioso (evil.com) -->
<!DOCTYPE html>
<html>
<head>
  <title>Ganhe dinheiro r√°pido!</title>
  <style>
    .overlay-container {
      position: relative;
      width: 400px;
      height: 300px;
      margin: 50px auto;
    }
    
    .malicious-iframe {
      position: absolute;
      width: 400px;
      height: 300px;
      opacity: 0.1; /* Quase invis√≠vel */
      z-index: 2;
    }
    
    .fake-button {
      position: absolute;
      top: 100px;
      left: 150px;
      width: 100px;
      height: 40px;
      background: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
      z-index: 1;
    }
  </style>
</head>
<body>
  <h1>üéÅ Clique para ganhar $1000!</h1>
  
  <div class="overlay-container">
    <!-- Iframe invis√≠vel da v√≠tima por cima do bot√£o falso -->
    <iframe src="https://victim-bank.com/transfer" 
            class="malicious-iframe"></iframe>
    
    <!-- Bot√£o falso que o usu√°rio pensa que est√° clicando -->
    <button class="fake-button">Clique aqui!</button>
  </div>
</body>
</html>`;

  const javascriptDefenseCode = `// Prote√ß√£o adicional via JavaScript (frame busting)
// No topo da sua p√°gina:
if (window.top !== window.self) {
  // Esta p√°gina est√° sendo carregada em um frame
  window.top.location = window.self.location;
}

// Vers√£o mais robusta
(function() {
  if (window !== window.top) {
    try {
      // Tentar acessar o parent (falha se cross-origin)
      if (window.parent.location.hostname !== window.location.hostname) {
        throw new Error('Clickjacking detected');
      }
    } catch (e) {
      // Redirecionar para sair do frame
      window.top.location.href = window.location.href;
    }
  }
})();

// Para aplica√ß√µes modernas, prefira headers HTTP
// Este m√©todo pode ser contornado por atacantes`;

  const cspExamplesCode = `// Exemplos de Content Security Policy para frames

// 1. Bloquear todos os frames
Content-Security-Policy: frame-ancestors 'none'

// 2. Permitir apenas same-origin
Content-Security-Policy: frame-ancestors 'self'

// 3. Permitir origens espec√≠ficas
Content-Security-Policy: frame-ancestors 'self' https://trusted.com https://partner.com

// 4. Combinar com outras diretivas
Content-Security-Policy: 
  default-src 'self'; 
  frame-ancestors 'none'; 
  script-src 'self' 'unsafe-inline'

// 5. Para desenvolvimento (permitir localhost)
Content-Security-Policy: frame-ancestors 'self' http://localhost:3000 https://localhost:3000`;

  return (
    <Box>
      <Typography variant="h4" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <Visibility color="error" />
        Clickjacking
      </Typography>

      <Alert severity="error" sx={{ mb: 3 }}>
        <strong>O que √© Clickjacking?</strong><br />
        Clickjacking engana usu√°rios para clicarem em elementos ocultos ou disfar√ßados. 
        O atacante sobrep√µe conte√∫do invis√≠vel sobre bot√µes leg√≠timos, fazendo o usu√°rio 
        executar a√ß√µes n√£o intencionais como transfer√™ncias banc√°rias, altera√ß√£o de configura√ß√µes, 
        ou compartilhamento de dados.
      </Alert>

      <Stack spacing={3}>
        {/* Configura√ß√£o de Prote√ß√£o */}
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üõ°Ô∏è Configura√ß√£o de Prote√ß√£o
            </Typography>
            
            <FormControlLabel
              control={
                <Switch
                  checked={frameProtectionEnabled}
                  onChange={(e) => setFrameProtectionEnabled(e.target.checked)}
                />
              }
              label={frameProtectionEnabled ? "X-Frame-Options: DENY (Protegido)" : "Sem prote√ß√£o (Vulner√°vel)"}
              sx={{ display: 'block', mb: 2 }}
            />

            <Box sx={{ 
              p: 2, 
              backgroundColor: frameProtectionEnabled ? '#f3fff3' : '#fff3f3', 
              borderRadius: 1,
              border: `1px solid ${frameProtectionEnabled ? '#4caf50' : '#f44336'}`
            }}>
              <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>
                {frameProtectionEnabled 
                  ? 'X-Frame-Options: DENY\nContent-Security-Policy: frame-ancestors \'none\''
                  : 'Nenhum header de prote√ß√£o configurado'
                }
              </Typography>
            </Box>
          </CardContent>
        </Card>

        {/* Simula√ß√£o de Clickjacking */}
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üé≠ Simula√ß√£o de Ataque Clickjacking
            </Typography>
            
            <Alert severity="warning" sx={{ mb: 2 }}>
              Esta simula√ß√£o mostra como um atacante pode sobrepor elementos invis√≠veis 
              para enganar usu√°rios. Em um ataque real, o usu√°rio n√£o saberia que est√° 
              clicando no elemento errado.
            </Alert>

            <FormControlLabel
              control={
                <Switch
                  checked={showClickjackingDemo}
                  onChange={(e) => setShowClickjackingDemo(e.target.checked)}
                />
              }
              label="Mostrar simula√ß√£o de ataque"
              sx={{ display: 'block', mb: 2 }}
            />

            {showClickjackingDemo && (
              <Box sx={{ position: 'relative', height: 200, border: '2px dashed #ff9800', borderRadius: 1, overflow: 'hidden' }}>
                {/* Bot√£o leg√≠timo vis√≠vel */}
                <Button
                  variant="contained"
                  color="success"
                  sx={{
                    position: 'absolute',
                    top: 80,
                    left: 50,
                    zIndex: frameProtectionEnabled ? 2 : 1
                  }}
                  onClick={handleLegitimateClick}
                >
                  A√ß√£o Leg√≠tima
                </Button>

                {/* Bot√£o malicioso sobreposto (invis√≠vel em ataque real) */}
                {!frameProtectionEnabled && (
                  <Button
                    variant="contained"
                    color="error"
                    sx={{
                      position: 'absolute',
                      top: 80,
                      left: 50,
                      zIndex: 2,
                      opacity: 0.3, // Em um ataque real seria 0
                      backgroundColor: '#f44336'
                    }}
                    onClick={handleMaliciousClick}
                  >
                    A√ß√£o Maliciosa
                  </Button>
                )}

                <Typography 
                  variant="caption" 
                  sx={{ 
                    position: 'absolute', 
                    bottom: 10, 
                    left: 10, 
                    color: 'text.secondary' 
                  }}
                >
                  {frameProtectionEnabled 
                    ? "üõ°Ô∏è Prote√ß√£o ativa - overlay bloqueado" 
                    : "‚ö†Ô∏è Vulner√°vel - bot√£o malicioso sobreposto (parcialmente vis√≠vel para demonstra√ß√£o)"
                  }
                </Typography>
              </Box>
            )}

            <Box sx={{ mt: 2, display: 'flex', gap: 2, flexWrap: 'wrap' }}>
              <Chip 
                label={`Cliques leg√≠timos: ${clickCount}`} 
                color="success" 
                variant="outlined" 
              />
              <Chip 
                label={`Cliques maliciosos: ${maliciousClickCount}`} 
                color="error" 
                variant="outlined" 
              />
            </Box>
          </CardContent>
        </Card>

        {/* Tipos de Ataques Clickjacking */}
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üéØ Tipos de Ataques Clickjacking
            </Typography>
            
            <Stack spacing={2}>
              <Alert severity="error">
                <strong>üè¶ Clickjacking Banc√°rio:</strong> Sobrepor iframe de banco sobre bot√£o "Ganhe dinheiro", 
                fazendo usu√°rio transferir dinheiro sem saber.
              </Alert>
              
              <Alert severity="error">
                <strong>üì± Hijack de Webcam:</strong> Overlay invis√≠vel sobre bot√£o de permiss√£o de c√¢mera 
                em site leg√≠timo, ativando webcam secretamente.
              </Alert>
              
              <Alert severity="error">
                <strong>üîó Likejacking:</strong> Fazer usu√°rios curtirem p√°ginas no Facebook sem conhecimento, 
                usando iframe invis√≠vel sobre conte√∫do atrativo.
              </Alert>
              
              <Alert severity="error">
                <strong>‚öôÔ∏è Configura√ß√µes maliciosas:</strong> Alterar configura√ß√µes de privacidade ou 
                seguran√ßa em redes sociais atrav√©s de overlays.
              </Alert>
            </Stack>
          </CardContent>
        </Card>

        {/* Exemplo de C√≥digo Malicioso */}
        <Accordion>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Warning sx={{ mr: 1, color: 'error.main' }} />
            <Typography variant="h6">Exemplo de Site Malicioso</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="subtitle1" color="error" gutterBottom>
              üíÄ Como um atacante cria uma p√°gina clickjacking:
            </Typography>
                         <Box sx={{ 
               '& pre': { 
                 overflow: 'auto !important',
                 maxWidth: '100%',
                 fontSize: '0.85rem !important'
               }
             }}>
               <SyntaxHighlighter 
                 language="html" 
                 style={tomorrow}
                 wrapLongLines={true}
                 customStyle={{
                   margin: 0,
                   borderRadius: '8px',
                   fontSize: '0.85rem'
                 }}
               >
                 {attackCodeHTML}
               </SyntaxHighlighter>
             </Box>
          </AccordionDetails>
        </Accordion>

        {/* Headers de Prote√ß√£o */}
        <Accordion>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Block sx={{ mr: 1 }} />
            <Typography variant="h6">Headers de Prote√ß√£o</Typography>
          </AccordionSummary>
          <AccordionDetails>
                         <Stack spacing={3}>
               <Box>
                 <Typography variant="subtitle1" color="error" gutterBottom>
                   ‚ùå Servidor Vulner√°vel
                 </Typography>
                 <Box sx={{ 
                   '& pre': { 
                     overflow: 'auto !important',
                     maxWidth: '100%',
                     fontSize: '0.85rem !important'
                   }
                 }}>
                   <SyntaxHighlighter 
                     language="javascript" 
                     style={tomorrow}
                     wrapLongLines={true}
                     customStyle={{
                       margin: 0,
                       borderRadius: '8px',
                       fontSize: '0.85rem'
                     }}
                   >
                     {vulnerableHeadersCode}
                   </SyntaxHighlighter>
                 </Box>
               </Box>
               <Box>
                 <Typography variant="subtitle1" color="success.main" gutterBottom>
                   ‚úÖ Servidor Protegido
                 </Typography>
                 <Box sx={{ 
                   '& pre': { 
                     overflow: 'auto !important',
                     maxWidth: '100%',
                     fontSize: '0.85rem !important'
                   }
                 }}>
                   <SyntaxHighlighter 
                     language="javascript" 
                     style={tomorrow}
                     wrapLongLines={true}
                     customStyle={{
                       margin: 0,
                       borderRadius: '8px',
                       fontSize: '0.85rem'
                     }}
                   >
                     {safeHeadersCode}
                   </SyntaxHighlighter>
                 </Box>
               </Box>
             </Stack>
          </AccordionDetails>
        </Accordion>

        {/* Content Security Policy */}
        <Accordion>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Code sx={{ mr: 1 }} />
            <Typography variant="h6">Content Security Policy Examples</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="body1" gutterBottom>
              CSP oferece controle mais granular sobre onde sua p√°gina pode ser incorporada:
            </Typography>
                         <Box sx={{ 
               '& pre': { 
                 overflow: 'auto !important',
                 maxWidth: '100%',
                 fontSize: '0.85rem !important'
               }
             }}>
               <SyntaxHighlighter 
                 language="http" 
                 style={tomorrow}
                 wrapLongLines={true}
                 customStyle={{
                   margin: 0,
                   borderRadius: '8px',
                   fontSize: '0.85rem'
                 }}
               >
                 {cspExamplesCode}
               </SyntaxHighlighter>
             </Box>
          </AccordionDetails>
        </Accordion>

        {/* Frame Busting JavaScript */}
        <Accordion>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Code sx={{ mr: 1 }} />
            <Typography variant="h6">Prote√ß√£o JavaScript (Frame Busting)</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Alert severity="warning" sx={{ mb: 2 }}>
              ‚ö†Ô∏è JavaScript pode ser desabilitado ou contornado. Sempre use headers HTTP como prote√ß√£o principal.
            </Alert>
                         <Box sx={{ 
               '& pre': { 
                 overflow: 'auto !important',
                 maxWidth: '100%',
                 fontSize: '0.85rem !important'
               }
             }}>
               <SyntaxHighlighter 
                 language="javascript" 
                 style={tomorrow}
                 wrapLongLines={true}
                 customStyle={{
                   margin: 0,
                   borderRadius: '8px',
                   fontSize: '0.85rem'
                 }}
               >
                 {javascriptDefenseCode}
               </SyntaxHighlighter>
             </Box>
          </AccordionDetails>
        </Accordion>

        {/* Compara√ß√£o de M√©todos */}
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üìä Compara√ß√£o de M√©todos de Prote√ß√£o
            </Typography>
            
                         <Box sx={{ display: 'flex', gap: 2, flexDirection: { xs: 'column', lg: 'row' } }}>
              <Card sx={{ flex: 1, border: '1px solid #2196f3' }}>
                <CardContent>
                  <Typography variant="subtitle1" sx={{ color: '#2196f3', mb: 1 }}>
                    X-Frame-Options
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                    ‚úÖ Suporte universal<br/>
                    ‚úÖ Simples de implementar<br/>
                    ‚ùå Limitado (apenas 3 op√ß√µes)<br/>
                    ‚ùå Legado
                  </Typography>
                </CardContent>
              </Card>

              <Card sx={{ flex: 1, border: '1px solid #4caf50' }}>
                <CardContent>
                  <Typography variant="subtitle1" sx={{ color: '#4caf50', mb: 1 }}>
                    Content Security Policy
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                    ‚úÖ Muito flex√≠vel<br/>
                    ‚úÖ Moderno<br/>
                    ‚úÖ M√∫ltiplas prote√ß√µes<br/>
                    ‚ùå Mais complexo
                  </Typography>
                </CardContent>
              </Card>

              <Card sx={{ flex: 1, border: '1px solid #ff9800' }}>
                <CardContent>
                  <Typography variant="subtitle1" sx={{ color: '#ff9800', mb: 1 }}>
                    JavaScript Frame Busting
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                    ‚ùå Pode ser desabilitado<br/>
                    ‚ùå Contorn√°vel<br/>
                    ‚ùå N√£o confi√°vel<br/>
                    ‚úÖ Fallback √∫til
                  </Typography>
                </CardContent>
              </Card>
            </Box>
          </CardContent>
        </Card>

        {/* Dicas de Preven√ß√£o */}
        <Alert severity="info">
          <Typography variant="h6" gutterBottom>üõ°Ô∏è Como Prevenir Clickjacking:</Typography>
          <ul>
            <li><strong>X-Frame-Options: DENY:</strong> Bloqueia todos os frames (mais restritivo)</li>
            <li><strong>X-Frame-Options: SAMEORIGIN:</strong> Permite apenas same-origin</li>
            <li><strong>CSP frame-ancestors:</strong> Controle granular de origens permitidas</li>
            <li><strong>Use HTTPS:</strong> Evita ataques man-in-the-middle nos headers</li>
            <li><strong>Teste regularmente:</strong> Verifique se headers est√£o sendo enviados</li>
            <li><strong>Frame busting como backup:</strong> JavaScript adicional, mas n√£o principal</li>
            <li><strong>Educa√ß√£o do usu√°rio:</strong> Ensine sobre URLs suspeitas e phishing</li>
          </ul>
        </Alert>
      </Stack>
    </Box>
  );
};

export default ClickjackingDemo; 